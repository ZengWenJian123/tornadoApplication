#coding=utf-8

import os
import tornado.ioloop
import tornado.web
from config import kUploadSavePath, kFaceDBPath
from errorNum import *
from PLogger import Logger
from ImgTool import img2Base64, getImgTypeByFileName
from UuidTool import genUuidByFileName, genUuidRandom
from jsonTool import *

__author__ = 'Administrator'

class FaceRecgInMemHandler(tornado.web.RequestHandler):

    def initialize(self, database):
        if not os.path.exists(kUploadSavePath):
            os.makedirs(kUploadSavePath)

        self.__logger =  Logger()
        self.__faceRecgModel = database

    def get(self):
        self.write('you should have post request')

    def post(self):
        self.__logger.info('receive a request from client')
        upFile = self.__getUploadFile()
        if upFile == None:
            return
        self.__logger.info('file uploaded, save name is ' + upFile)
        # id, thumb, similarity, name, title, intro
        id, thumb, similarity, name, title, intro = self.__faceRecgModel.findIidentityByImage(upFile)
        self.__logger.info(upFile + ' id is ' + id + ' similarity is ' + str(similarity) + 'name is ' + name + ' title is ' + title + ' intro is ' + intro)

        # img to base64 and trans to client.
        imgFullPath = os.path.join(kFaceDBPath, thumb)
        imgBase64 = img2Base64(imgFullPath)
        ext = getImgTypeByFileName(thumb)
        # jsonStr = '{"errCode":"0","id":"' + id + '","thumb":"' + imgBase64 + '","ext":"' + ext + '","}'
        jsonStr = '{"errCode":"0","id":"' + id + '","thumb":"' + imgBase64 + '","ext":"' + ext + '","name":"' + name + '","title":"' + title + '","intro":"' + intro + '"}'
        # self.__logger.info('ret str is ' + jsonStr)
        self.write(jsonStr)

    '''
    文件上传，返回文件保存信息
    '''
    def __getUploadFile(self):
        self.__logger.info("receiving a file from client")
        #check if upload file more than 1 then return error
        fileMetas = []
        try:
            #do some thing you need
            fileMetas = self.request.files['file']
        except Exception as e:
            retErrStr = generateJsonRetStr(SHOULD_UPLOAD_ONE_JPG_FILE, '请上传一张图片以供识别')
            self.write(retErrStr)
            return None
            #error: has not attribute
        fileMetas = self.request.files['file']
        if 1 != len(fileMetas):
            self.__logger.error("upload file num is not 1")
            retErrStr = generateJsonRetStr(PIC_NUM_SHOUD_ONE, 'upload file num is not 1')
            self.write(retErrStr)
            return

        #check if upload file type is not jpg then return error
        fileMeta = fileMetas[0]
        oriFileName = fileMeta['filename']
        baseName, extStr = os.path.splitext(oriFileName)
        if extStr.lower() != '.jpg':
            self.__logger.error("upload file type is not jpg")
            retErrStr = generateJsonRetStr(PIC_TYPE_SHOUD_JPG, 'upload file type is not jpg')
            self.write(retErrStr)
            return

        # begin uploaded file
        randomStr = genUuidRandom()
        uploadedFileName = genUuidByFileName(randomStr)
        uploadedFileSavePathWithName = os.path.join(kUploadSavePath, uploadedFileName + '.jpg')
        with open(uploadedFileSavePathWithName, 'wb') as up:
            up.write(fileMeta['body'])
        self.__logger.info("file saved name is " + uploadedFileSavePathWithName)

        return uploadedFileSavePathWithName